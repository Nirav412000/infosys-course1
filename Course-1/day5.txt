Quiz 30   0 0
Quiz 31   Error: Not Defind
Quiz 32   4 3 4 5


#pf-exer-26

def factorial(number):
    fact=1
    if(number>=2):
        for i in range(2,number+1):
            fact=fact*i
    return fact

def find_strong_numbers(num_list):
    lisst=[]
    for num in num_list:
        num2=num
        summ=0
        while num2>0 :
            rem=int(num2%10)
            summ=summ+factorial(rem)
            num2=int(num2/10)
        if(summ==num):
            lisst.append(num)
    return lisst
    
num_list=[145,375,100,2,10]
strong_num_list=find_strong_numbers(num_list)
print(strong_num_list)




#pf-exer-27


account_list=[1001,1002,1003,1004,1005]
balance_list=[2500,10000,7000,1500,500]
amount=1000
account_number=1003
transaction_type="Withdraw"

def withdraw(account_list,balance_list,amount,account_number):
    flag=None
    for index in range(0,len(account_list)):
        if(account_list[index]==account_number):
            flag=True
            value=index
    if(flag==True):
        balance=balance_list[value]
        new_balance=balance-amount
        if(new_balance >= 500):
            balance_list[value]=new_balance
            print("Transaction completed successfully")
            print("Balance Amount :", new_balance)
        else:
            print("Insufficient Balance")
    else:
        print("Invalid Account number")

def deposit(account_list,balance_list,amount,account_number):
    flag=None
    for index in range(0,len(account_list)):
        if(account_list[index]==account_number):
            flag=True
            value=index
    if(flag==True):
        balance=balance_list[value]
        new_balance=balance+amount
        balance_list[value]=new_balance
        print("Transaction completed successfully")
        print("Balance Amount :", new_balance)
    else:
        print("Invalid Account number")
        
def bal_inquiry(account_list,balance_list,amount,account_number):
    flag=None
    for index in range(0,len(account_list)):
        if(account_list[index]==account_number):
            flag=True
            value=index
    if(flag==True):
        balance=balance_list[value]
        print(balance)
    else:
        print("Invalid Account number")


if(transaction_type=="Withdraw"):
    withdraw(account_list,balance_list,amount,account_number)
elif(transaction_type=="Deposit"):
    deposit(account_list,balance_list,amount,account_number)
elif(transaction_type=="Balance Enquiry"):
    bal_inquiry(account_list,balance_list,amount,account_number)
else:
    print("Invalid Transaction Type")
	
	
#PF-Exer-28
                                              
#This method accepts the name of winner of each match of the day
def find_winner_of_the_day(*match_tuple):
    t1=0
    t2=0
    for team in match_tuple:
        if(team=="Team1"):
            t1+=1
        else:
            t2+=1
    if(t1>t2):
        return "Team1"
    elif(t2>t1):
        return "Team2"
    else:
        return "Tie"

#Invoke the function with each of the print statements given below
print(find_winner_of_the_day("Team1","Team2","Team2","Team1","Team2"))
#print(find_winner_of_the_day("Team1","Team2","Team1","Team2"))



#PF-Exer-29
def merge_lists(list1,list2):
    list1=list1+list2
    return list1

    
def sort_list(merged_list):
    n = len(merged_list) 
    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if merged_list[j] > merged_list[j+1] : 
                merged_list[j], merged_list[j+1] = merged_list[j+1], merged_list[j]
    return merged_list

#Provide different values for list1 and list2 and test your program
merged_list=merge_lists(list1=[1,2,3,4,1] ,list2=[2,3,4,5,4,6])
print(merged_list)
sorted_merged_list=sort_list(merged_list)
print(sorted_merged_list)
